# vim: filetype=zsh

# ███████╗██╗   ██╗███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗
# ██╔════╝██║   ██║████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║
# █████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║
# ██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║
# ██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║
# ╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝

histerilize ()
{ LC_ALL=C sed --debug -i '/$1/d' $HISTFILE }
# https://9to5answer.com/how-to-remove-an-entry-from-the-history-in-zsh
# Elimina del hgistorial aquello que s le indique, Hace falta salir y entrar
# nuevamente a la terminal para ver los cambios
# the prefix LC_ALL=C prevents 'illegal anycodings_zsh byte sequence' failure.

b64d()
{ echo  "$1" | base64 -d ; }

dec2hex()
{ echo "obase=16; $1" | bc; }

psg()
{ ps -aux | grep $1 }

qrgen()
{ qrencode --verbose --background=faedeb --foreground=9b044c -s 8 -m 2 -l M -o "$(date +"qrcode_%F_%H%M%S").png" $1 }
# Genera qr a partir de texto. Colocarlos entre 'comillas'
# Tambien puedes redirigir un archivo, por ejemplo:
# qrgen < texto.txt
# Mas ejemplos en https://www.howtogeek.com/devops/how-to-create-qr-codes-from-the-linux-command-line/
#
wifisignal()
{ sudo iw dev $1 scan | egrep "signal|SSID" | sed -e "s/\tsignal: //" -e "s/\tSSID: //" }
# Debes indicar el nombre del adaptador wifi
# Escanea las redes cercanas
#
journalctl-warning()
{ journalctl --since "1 week ago" --grep "error" -p 4 -o json | jq -r '._EXE + "\t" + .SYSLOG_IDENTIFIER' | sort -u | column -t }
# Muestra errores de poca importancia
# Hay mas comandos en zalias. Este era demasiado largo y me daba problema con las comillas (quotes)
#
bleach()
{ grep -v '^[[:space:]]*$' $1 | grep -v "^#" }
# Elimina las lineas blancas, filtra inverso los '#' y solo imprime
# las lineas activas de un archivo conf.
#
zfun_jpegoptim()
{ cat "$1" | jpegoptim -pt --workers=4 --all-progressive --stdin --max=90 > "${1%.*}-compress.jpg" }

zfun_jpegoptim_deflate()
{ cat "$1" | jpegoptim -pt --workers=4 --all-normal --strip-all --stdin --size=10k > "${1%.*}-deflate.jpg" }
# https://virment.com/how-to-use-jpegoptim-ubuntu/
# https://ottan.jp/posts/2018/02/mac-jpeg-png-gif-compressor-homebrew/
#
zfun_oxipng()
{ oxipng "$1" --strip safe --preserve --threads 2 -i 1 -o 3 -av --out "${1%.*}-compress.png" }
#
#
zfun_wepb_convert()
{ dwebp "$1" -o "${1%.*}.jpg" }

function tinyurl() {
    local url="$1"
    local shortened_url=$(curl -s "http://tinyurl.com/api-create.php?url=${url}")
    echo "${shortened_url}"
}

figlet_preview() {
    ls /usr/share/figlet/fonts/*.flf | fzf --preview 'figlet -f {} "Kasumi"'
}

grep_line() {
    local file="$1"
    local pattern="$2"

    # Usamos grep directamente en el archivo para preservar la numeración de líneas
    local result=$(grep -in "$pattern" "$file" | sed -e '/^[[:space:]]*#/d' -e '/^[[:space:]]*$/d' | fzf)

    if [[ -n "$result" ]]; then
        # Extraemos el número de línea del resultado de grep (antes de ':')
        local line=$(echo "$result" | cut -d: -f1)

        # Abrimos nvim en la línea seleccionada
        nvim +"$line" "$file"
    fi
}

ren_xxhash() {
    local dir="$(pwd)"

    # Verifica si el comando 'xxhsum' está disponible
    if ! command -v xxhsum &> /dev/null; then
        echo "Error: xxhsum no está instalado. Por favor, instala 'xxhash'."
        return 1
    fi

    # Itera sobre los archivos en el directorio actual
    for file in "$dir"/*; do
        # Verifica si el archivo es un archivo regular
        if [ -f "$file" ]; then
            # Calcula el hash del archivo
            hash=$(xxhsum "$file" | cut -d' ' -f1)

            # Obtiene el nombre del archivo sin la ruta
            filename=$(basename "$file")

            # Obtiene la extensión del archivo (si la tiene)
            extension="${filename##*.}"

            # Genera el nuevo nombre del archivo con el hash como prefijo
            new_filename="${hash}_${filename}"

            # Renombra el archivo
            mv "$file" "$dir/$new_filename"

            echo "Archivo renombrado: $file -> $dir/$new_filename"
        fi
    done

    echo "Proceso completado."
}
# ────────────────────────────────────────────────────────────
# Busca interactivamente texto dentro de  archivos
# para luego abrir la linea resultante en Neovim
#
# Uso:
#   fsearch [directorio]

fsearch() {
    local SEARCH_DIR="${1:-.}"
    local selection file line

    selection=$(fzf --ansi --phony --query "" \
            --bind "change:reload(grep -rIi --exclude-dir='.git' --color=always --line-number {q} \"$SEARCH_DIR\" || true)" \
        --preview '
            file=$(echo {} | cut -d: -f1)
            line=$(echo {} | cut -d: -f2)
            if [ -f "$file" ] && [[ "$line" =~ ^[0-9]+$ ]]; then
                start=$((line > 2 ? line-2 : 1))
                end=$((line+10))
                bat --style=numbers --color=always \
                    --line-range "$start:$end" \
                    --highlight-line "$line" "$file"
            fi
        ' \
        | awk -F: '{file=$1; line=$2; if (file && line) print file":"line}')

    if [[ -n "$selection" ]]; then
        file="${selection%%:*}"
        line="${selection#*:}"
        nvim "+${line}" "${file}"
    fi
}

# ────────────────────────────────────────────────────────────
# Combina 'grep' con 'bat' para buscar texto
# o patrones en archivos, mostrando los resultados
# con resaltado de sintaxis y número de línea.
#
# Uso:
#   batgrep <patrón> <archivo> [opciones_grep]
#
# Ejemplo:
#   batgrep "TODO|FIXME" *.py
#     → Busca líneas que contengan 'TODO' o 'FIXME' en archivos Python.

batgrep() {
    if [[ $# -lt 2 ]]; then
        echo "Uso: batgrep <patrón> <archivo> [opciones_grep]"
        return 1
    fi

    local pattern="$1"
    shift
    grep --color=always -E -n "$pattern" "$@" | bat --paging=never --plain
}
